namespace CustomCraftSMLTests
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Reflection;
    using Common;
    using Common.EasyMarkup;
    using CustomCraft2SML.PublicAPI;
    using CustomCraft2SML.Serialization.Entries;
    using CustomCraft2SML.Serialization.Lists;
    using NUnit.Framework;

    [TestFixture]
    internal class EquipmentSalvageFiles
    {
        private static string EquipmentSalvageDirectory
        {
            get
            {
                string path = Path.GetDirectoryName(System.AppDomain.CurrentDomain.BaseDirectory);
                path = Directory.GetParent(path).FullName;
                path = Directory.GetParent(path).FullName;
                return Directory.GetParent(path).FullName + "/CustomCraftSML/SampleFiles/EquipmentSalvage/";
            }
        }

        private const string Line = "------------------------------------";
        private const string SalvageTabID = "SalvageTab";
        private const string PathToSalvageTab = "Fabricator/Resources";
        private const string SalvageCraftingTab = PathToSalvageTab + "/" + SalvageTabID;

        private static readonly string Today = DateTime.Today.ToString("dd/MMMM/yyyy");
        private static readonly string CC2Version = QuickLogger.GetAssemblyVersion(Assembly.GetAssembly(typeof(CustomCraft2SML.QPatch)));

        private static readonly string[] TopLines = new[]
        {
            "Equipment Salvage",
            "Created for Custom Craft 2",
            "Author: PrimeSonic",
            "Text files included in this mod:",
            "     EquipmentSalvage_Tabs.txt",
            "     EquipmentSalvage_Recipes.txt",
            "     EquipmentSalvage_Unlocks.txt",
        };

        private static readonly string[] BottomLines = new[]
        {
            "Published on Nexus ~ https://www.nexusmods.com/subnautica/mods/188",
            "Source code to all my Subnautica mods available on GitHub ~ https://github.com/PrimeSonic/PrimeSonicSubnauticaMods",
            $"This file was generated by EasyMarkup code on {Today} for Custom Craft 2 version {CC2Version}",
        };

        private static void WriteFile<T>(T tabList, string fileName) where T : EmProperty
        {
            string filePath = EquipmentSalvageDirectory + fileName;

            var linesToWrite = new List<string>();
            linesToWrite.AddRange(EmUtils.CommentTextLines(TopLines));
            linesToWrite.Add(EmUtils.CommentText(Line));
            linesToWrite.Add(tabList.PrettyPrint());
            linesToWrite.Add(EmUtils.CommentText(Line));
            linesToWrite.AddRange(EmUtils.CommentTextLines(BottomLines));

            File.WriteAllLines(filePath, linesToWrite);
        }

        private static readonly bool EnableUnlocking = true;

        [Test]
        public void Generate_All_Files()
        {
            // TABS
            var salvageTab = new CustomCraftingTab
            {
                TabID = SalvageTabID,
                DisplayName = "Salvage and Recycling",
                ParentTabPath = PathToSalvageTab
            };

            var tabList = new CustomCraftingTabList
            {
                salvageTab
            };

            WriteFile(tabList, "EquipmentSalvage_Tabs.txt");

            // Move the Metal Salvage into the new tab
            var moveMetalSalvage = new MovedRecipe
            {
                ItemID = TechType.Titanium.ToString(),
                OldPath = PathHelper.Fabricator.Resources.BasicMaterials.BasicMaterialsTab.GetCraftingPath.ToString(),
                NewPath = tabList[0].FullPath,
                Hidden = false
            };

            var movedList = new MovedRecipeList
            {
                moveMetalSalvage
            };

            WriteFile(movedList, "EquipmentSalvage_Moves.txt");

            // RECIPES
            var leadSalvage = new AliasRecipe
            {
                ItemID = "LeadSalvage",
                DisplayName = "Salvage Lead",
                Tooltip = "Recover the useful lead from a radiation suit no longer in use",
                Path = tabList[0].FullPath,
                ForceUnlockAtStart = !EnableUnlocking,
                PdaCategory = TechCategory.BasicMaterials,
                PdaGroup = TechGroup.Resources,
            };
            leadSalvage.AddLinkedItem(TechType.Lead);
            leadSalvage.AddLinkedItem(TechType.Lead);
            leadSalvage.AddIngredient(TechType.RadiationSuit);
            leadSalvage.AddIngredient(TechType.RadiationHelmet);
            leadSalvage.AddIngredient(TechType.RadiationGloves);

            var copperSalvage = new AliasRecipe
            {
                ItemID = "CopperSalvage",
                DisplayName = "Salvage Copper",
                Tooltip = "Recover the precious copper from unneeded power cells",
                Path = tabList[0].FullPath,
                ForceUnlockAtStart = !EnableUnlocking,
                PdaCategory = TechCategory.BasicMaterials,
                PdaGroup = TechGroup.Resources,
                FunctionalID = TechType.Copper.ToString()
            };
            copperSalvage.AddLinkedItem(TechType.Copper);
            copperSalvage.AddLinkedItem(TechType.Copper);
            copperSalvage.AddIngredient(TechType.PowerCell);

            var deepSalvage = new AliasRecipe
            {
                ItemID = "DeepSalvage",
                DisplayName = "Salvage Precious Metals",
                Tooltip = "Recover the lithium and magnetite from unneeded deep power cells",
                Path = tabList[0].FullPath,
                ForceUnlockAtStart = !EnableUnlocking,
                PdaCategory = TechCategory.AdvancedMaterials,
                PdaGroup = TechGroup.Resources,
            };
            deepSalvage.AddLinkedItem(TechType.Lithium);
            deepSalvage.AddLinkedItem(TechType.Magnetite);
            deepSalvage.AddLinkedItem(TechType.Lithium);
            deepSalvage.AddLinkedItem(TechType.Magnetite);
            deepSalvage.AddIngredient("DeepPowerCell");

            var ionSalvage = new AliasRecipe
            {
                ItemID = "IonCubeSalvage",
                DisplayName = "Salvage Ion Cubes",
                Tooltip = "Recover the precious ion cubes from unneeded ion power cells",
                Path = tabList[0].FullPath,
                ForceUnlockAtStart = !EnableUnlocking,
                PdaCategory = TechCategory.AdvancedMaterials,
                PdaGroup = TechGroup.Resources,
            };
            ionSalvage.AddLinkedItem(TechType.PrecursorIonCrystal);
            ionSalvage.AddLinkedItem(TechType.PrecursorIonCrystal);
            ionSalvage.AddIngredient(TechType.PrecursorIonPowerCell);

            var diamondSalvage = new AliasRecipe
            {
                ItemID = "DiamondSalvage",
                DisplayName = "Salvage Diamonds",
                Tooltip = "Recover diamonds from retired laser cutters. Don't forget to remove the batteries first.",
                Path = tabList[0].FullPath,
                ForceUnlockAtStart = !EnableUnlocking,
                PdaCategory = TechCategory.AdvancedMaterials,
                PdaGroup = TechGroup.Resources,
            };
            diamondSalvage.AddLinkedItem(TechType.Diamond);
            diamondSalvage.AddLinkedItem(TechType.Diamond);
            diamondSalvage.AddIngredient(TechType.LaserCutter);

            var aliasList = new AliasRecipeList
            {
                leadSalvage, copperSalvage, deepSalvage, ionSalvage, diamondSalvage
            };

            WriteFile(aliasList, "EquipmentSalvage_Recipes.txt");

            // UNLOCKS
            if (!EnableUnlocking)
                return;

            var radSuit = new ModifiedRecipe { ItemID = leadSalvage.GetIngredient(0).ItemID, AmountCrafted = null };
            radSuit.AddUnlock(leadSalvage.ItemID);

            var powerCell = new ModifiedRecipe { ItemID = copperSalvage.GetIngredient(0).ItemID, AmountCrafted = null };
            powerCell.AddUnlock(copperSalvage.ItemID);

            var deepPowerCell = new ModifiedRecipe { ItemID = deepSalvage.GetIngredient(0).ItemID, AmountCrafted = null };
            deepPowerCell.AddUnlock(deepSalvage.ItemID);

            var ionPowerCell = new ModifiedRecipe { ItemID = ionSalvage.GetIngredient(0).ItemID, AmountCrafted = null };
            ionPowerCell.AddUnlock(ionSalvage.ItemID);

            var laserCutter = new ModifiedRecipe { ItemID = diamondSalvage.GetIngredient(0).ItemID, AmountCrafted = null };
            laserCutter.AddUnlock(diamondSalvage.ItemID);

            var modList = new ModifiedRecipeList
            {
                radSuit, powerCell, deepPowerCell, ionPowerCell, laserCutter
            };

            WriteFile(modList, "EquipmentSalvage_Unlocks.txt");
        }
    }
}


