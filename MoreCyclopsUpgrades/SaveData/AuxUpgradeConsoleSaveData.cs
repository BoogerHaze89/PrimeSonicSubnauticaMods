namespace MoreCyclopsUpgrades
{
    using System.Collections.Generic;
    using Common.EasyMarkup;
    using SMLHelper.V2.Utility;
    using System.IO;
    using System.Collections;

    public class AuxUpgradeConsoleSaveData : EmPropertyCollection
    {
        private readonly string ID;

        private readonly EmModuleSaveData Module1;
        private readonly EmModuleSaveData Module2;
        private readonly EmModuleSaveData Module3;
        private readonly EmModuleSaveData Module4;
        private readonly EmModuleSaveData Module5;
        private readonly EmModuleSaveData Module6;

        private static ICollection<EmProperty> AucUpConsoleDefs = new List<EmProperty>(6)
        {
            new EmModuleSaveData("Module1"),
            new EmModuleSaveData("Module2"),
            new EmModuleSaveData("Module3"),
            new EmModuleSaveData("Module4"),
            new EmModuleSaveData("Module5"),
            new EmModuleSaveData("Module6"),
        };        

        public EmModuleSaveData GetModuleInSlot(string slot)
        {
            switch (slot)
            {
                case "Module1": return Module1;
                case "Module2": return Module2;
                case "Module3": return Module3;
                case "Module4": return Module4;
                case "Module5": return Module5;
                case "Module6": return Module6;
                default: return null;
            }
        }

        public AuxUpgradeConsoleSaveData(string key) : base(key, AucUpConsoleDefs)
        {
            Module1 = (EmModuleSaveData)base.Properties["Module1"];
            Module2 = (EmModuleSaveData)base.Properties["Module2"];
            Module3 = (EmModuleSaveData)base.Properties["Module3"];
            Module4 = (EmModuleSaveData)base.Properties["Module4"];
            Module5 = (EmModuleSaveData)base.Properties["Module5"];
            Module6 = (EmModuleSaveData)base.Properties["Module6"];
        }

        private string SaveDirectory => Path.Combine(SaveUtils.GetCurrentSaveDataDir(), "AuxUpgradeConsole");
        private string SaveFile => Path.Combine(SaveDirectory, ID + ".txt");

        public void Save()
        {
            if (!Directory.Exists(SaveDirectory))
            {
                Directory.CreateDirectory(SaveDirectory);
            }

            File.WriteAllLines(SaveFile, new[]
            {
                "# This save data was generated by EasyMarkup #",
                this.PrintyPrint(),
            });
        }

        public bool Load()
        {
            string saveDir = SaveFile;
            if (!File.Exists(saveDir))
            {
                Save();
                return false;
            }

            string serializedData = File.ReadAllText(saveDir);

            bool validData = this.FromString(serializedData);

            if (!validData)
            {
                Save();
                return false;
            }

            return true;
        }

        internal override EmProperty Copy() => new AuxUpgradeConsoleSaveData(ID);


    }
}

